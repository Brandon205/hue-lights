{"version":3,"sources":["Home.jsx","colorConverter.js","Lights.jsx","Groups.jsx","Connect.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Home","className","scale","num","in_min","in_max","out_min","out_max","rgbToXY","r","g","b","red","Math","pow","green","blue","xx","yy","zz","x","y","Number","parseFloat","toFixed","xyToRGB","brightness","X","Z","R","G","B","round","Lights","props","useState","lightSwitch","setLightSwitch","lights","setLights","lightNumber","setLightNumber","picker","setPicker","rgb","setRgb","useEffect","url","Axios","get","then","res","hueLights","Object","entries","data","content","toggleLight","lightNum","on","put","length","map","light","id","key","name","src","process","productname","alt","state","onClick","type","toLowerCase","includes","rgbColor","xy","bri","document","querySelector","classList","add","remove","addEventListener","once","colorToggle","autoComplete","onSubmit","e","preventDefault","target","elements","value","sendToast","updateBrightness","placeholder","to","style","width","color","disableAlpha","onChangeComplete","xyColor","updateColor","Groups","groups","setGroups","groupNum","setGroupNum","hueGroups","toggleLights","group","class","any_on","action","body","backgroundColor","groupNumber","Login","htmlFor","ip","onChange","setIP","required","updateURL","App","setUrl","connected","setConnected","setIp","redirect","setRedirect","localStorage","getItem","info","split","login","updateUrl","post","error","createToast","username","success","setItem","tempUrl","message","classes","M","toast","html","removeItem","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ace50c73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Welcome to Yet Another Hue Wep App</h1>\r\n        </div>\r\n    )\r\n}","const scale = (num, in_min, in_max, out_min, out_max) => { // To Scale numbers from a range down to another range\r\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n  }\r\n\r\nexport function rgbToXY(r, g, b) { // Return Format: [0.2553, 0.9112]\r\n    //RGB values set in between 0 and 1\r\n    r = scale(r, 0, 255, 0, 1)\r\n    g = scale(g, 0, 255, 0, 1)\r\n    b = scale(b, 0, 255, 0, 1)\r\n    //Apply gamma correction (For more accurate colors)\r\n    let red = r > 0.04045 ? Math.pow((r + 0.055) / (1.0 + 0.055), 2.4) : (r / 12.92)\r\n    let green = g > 0.04045 ? Math.pow((g + 0.055) / (1.0 + 0.055), 2.4) : (g / 12.92)\r\n    let blue = b > 0.04045 ? Math.pow((b + 0.055) / (1.0 + 0.055), 2.4) : (b / 12.92)\r\n    //Convert RGB values to XYZ\r\n    let xx = red * 0.649926 + green * 0.103455 + blue * 0.197109;\r\n    let yy = red * 0.234327 + green * 0.743075 + blue * 0.022598;\r\n    let zz = red * 0 + green * 0.053077 + blue * 1.035763\r\n    //Calculate XY values from XYZ\r\n    let x = xx / (xx + yy + zz);\r\n    let y = yy / (xx + yy + zz);\r\n    //Could now use the Y value as brightness yy: scale(y, 0, 1, 0, 255).toFixed(0)\r\n    return {'x': Number.parseFloat(x).toFixed(4), 'y': Number.parseFloat(y).toFixed(4)}\r\n}\r\n\r\nexport function xyToRGB(x, y, brightness) { // Return Format: {r: 255, g: 255, b: 255}\r\n    // Convert\r\n    let z = 1 - x - y\r\n    let Y = brightness\r\n    let X = (Y / y) * x\r\n    let Z = (Y / y) * z\r\n    // Convert to RGB\r\n    let R =  X * 1.656492 - Y * 0.354851 - Z * 0.255038;\r\n    let G = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;\r\n    let B =  X * 0.051713 - Y * 0.121364 + Z * 1.011530;\r\n    // Reverse gamma correction\r\n    let r = R <= 0.0031308 ? 12.92 * R : (1 + 0.055) * Math.pow(R, (1 / 2.4)) - 0.055;\r\n    let g = G <= 0.0031308 ? 12.92 * G : (1 + 0.055) * Math.pow(G, (1 / 2.4)) - 0.055;\r\n    let b = B <= 0.0031308 ? 12.92 * B : (1 + 0.055) * Math.pow(B, (1 / 2.4)) - 0.055;\r\n\r\n    return {'r': Math.round(scale(r, 0, 17, 0, 255)), 'g': Math.round(scale(g, 0, 17, 0, 255)), 'b': Math.round(scale(b, 0, 17, 0, 255))};\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { SketchPicker } from 'react-color';\r\nimport { rgbToXY, xyToRGB } from './colorConverter.js';\r\nimport Axios from 'axios';\r\n\r\nexport default function Lights(props) {\r\n  const [lightSwitch, setLightSwitch] = useState(false); // To refetch the API when the lights are toggled\r\n  const [lights, setLights] = useState([]);\r\n  const [lightNumber, setLightNumber] = useState(0); // Set this value to whatever light the colorpicker is for at that time\r\n  const [picker, setPicker] = useState(false); // Whether or not to display the Color Picker\r\n  const [rgb, setRgb] = useState({\"r\": 255, \"g\": 255, \"b\": 255});\r\n\r\n  useEffect(() => { // Will get all lights on page load as long as there is a URL given\r\n    if (props.url !== \"default\") {\r\n      Axios.get(props.url + '/lights').then(res => {\r\n        let hueLights = Object.entries(res.data)\r\n        setLights(hueLights)\r\n      })\r\n    }\r\n  }, [props.url, lightSwitch])\r\n\r\n  let toggleLight = (lightNum, on) => { // Turns a specific light on/off based on its ID\r\n    Axios.put(props.url + `/lights/${lightNum}/state`, {'on': on})\r\n      setLightSwitch(!lightSwitch)\r\n  }\r\n\r\n  let colorToggle = (lightNum) => { // Show the color picker for the corresponding light\r\n    let rgbColor; // Needs to return {r: 255, g: 255, b: 255} for react-color\r\n    Axios.get(props.url + `/lights/${lightNum}`).then(res => {\r\n      rgbColor = xyToRGB(res.data.state.xy[0], res.data.state.xy[1], res.data.state.bri)\r\n      setRgb(rgbColor)\r\n    })\r\n    setLightNumber(lightNum)\r\n    setPicker(true)\r\n\r\n    document.querySelector('#color-picker').classList.add('show');\r\n    document.querySelector('#color-picker').classList.remove('no-show');\r\n    document.querySelector('#cover-div').classList.add('opaque-div');\r\n    document.querySelector('#cover-div').classList.remove('no-show');\r\n    document.addEventListener('click', () => {\r\n      document.querySelector('#color-picker').classList.remove('show');\r\n      document.querySelector('#color-picker').classList.add('no-show');\r\n      document.querySelector('#cover-div').classList.add('no-show');\r\n      document.querySelector('#cover-div').classList.remove('opaque-div');\r\n    }, {once: true})\r\n  }\r\n\r\n  let updateColor = (color) => { // For the onChangeComplete of the ColorPicker\r\n    let xyColor = rgbToXY(color.r, color.g, color.b) // Needs to return [0.2345, 0.9876] for the Hue API\r\n    xyColor.x = parseFloat(xyColor.x)\r\n    xyColor.y = parseFloat(xyColor.y)\r\n    Axios.put(props.url + `/lights/${lightNumber}/state`, {\"xy\": [xyColor.x, xyColor.y]})\r\n  }\r\n\r\n  let updateBrightness = (e, lightNumber) => {\r\n    e.preventDefault()\r\n    let brightness = Number(e.target.elements[0].value)\r\n    if (brightness > 254 || brightness < 0) {\r\n      props.sendToast('Needs to be a value between 0 and 254', 'red')\r\n      return;\r\n    } else {\r\n      Axios.put(props.url + `/lights/${lightNumber}/state`, {\"bri\": brightness})\r\n      props.sendToast(`Set the brightness to ${brightness} on light number ${lightNumber}`, 'green')\r\n    }\r\n  }\r\n\r\n  let content;\r\n  if (lights.length > 0) { // Show connected lights or no connected lights message\r\n    content = lights.map((light, id) =>\r\n      <div className=\"col s6 offset-s3 m6\" key={id}>\r\n        <div className=\"card horizontal\">\r\n          <div className=\"card-stacked\">\r\n            <div className=\"card-content\">\r\n              <h4 className=\"header\">{light[1].name}</h4>\r\n              {lightSwitch}\r\n              <img src={`${process.env.PUBLIC_URL}/images/${light[1].productname}.svg`} alt={light[1].productname} />\r\n              <p><span className=\"blue-text bold\">{light[1].name}</span> is currently {light[1].state.on ? <span className=\"green-text bold\">On</span> : <span className=\"red-text bold\">Off</span>} </p>\r\n              <p>Product Name: {light[1].productname}</p>\r\n            </div>\r\n            <div className=\"card-action\">\r\n              <button className=\"waves-effect waves-light btn-large teal\" onClick={() => toggleLight(light[0], true)}>On</button>\r\n              <button className=\"waves-effect waves-light btn-large red\" onClick={() => toggleLight(light[0], false)}>Off</button>\r\n              {light[1].type.toLowerCase().includes(\"color\") ? <button className=\"waves-effect waves-light btn-large pink\" onClick={() => colorToggle(light[0])}>Color</button> : ''}\r\n              <form autoComplete=\"off\" onSubmit={(e) => updateBrightness(e, light[0])}>\r\n                <div className=\"container\">\r\n                  <input className=\"validate\" type=\"text\" name=\"brightness\" placeholder={\"Brightness: \" + light[1].state.bri + \" (between 0 and 254)\"} />\r\n                </div>\r\n                <button className=\"waves-effect waves-light btn-large grey\">Update Brightness</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    content = (\r\n      <div className=\"container\">\r\n        <h1>No connected lights found</h1>\r\n        <h4>Have you <Link to=\"/login\">connected</Link> your hue bridge yet?</h4>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 style={{\"marginTop\": 0}}>Lights</h2>\r\n      <div className={picker ? \"show\" : \"no-show\"} id=\"color-picker\">\r\n        <SketchPicker width=\"15vw\" color={rgb} disableAlpha={true} onChangeComplete={(color) => updateColor(color.rgb)} />\r\n      </div>\r\n      <div className=\"container\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { SketchPicker } from 'react-color';\r\nimport { rgbToXY, xyToRGB } from './colorConverter.js';\r\nimport Axios from 'axios';\r\n\r\nexport default function Groups(props) {\r\n    const [lightSwitch, setLightSwitch] = useState(false); // To refetch the API when the lights are toggled\r\n    const [groups, setGroups] = useState([]);\r\n    const [picker, setPicker] = useState(false); // Whether or not to display the Color Picker\r\n    const [groupNum, setGroupNum] = useState(0);\r\n    const [rgb, setRgb] = useState({\"r\": 255, \"g\": 255, \"b\": 255}); // Color Picker color\r\n\r\n    useEffect(() => { // Will get all groups as long as there is a URL given\r\n        if (props.url !== \"default\") {\r\n            Axios.get(props.url + \"/groups\").then(res => {\r\n                let hueGroups = Object.entries(res.data)\r\n                setGroups(hueGroups)\r\n            })\r\n        }\r\n    }, [props.url, lightSwitch])\r\n\r\n    let toggleLights = (groupNum, on) => { // Toggles all lights in the group\r\n        Axios.put(props.url + `/groups/${groupNum}/action`, {'on': on})\r\n        setLightSwitch(!lightSwitch)\r\n    }\r\n\r\n    let colorToggle = (groupNum) => { // Show the color picker for the corresponding light\r\n        let rgbColor; // Needs to return {r: 255, g: 255, b: 255} for react-color\r\n        Axios.get(props.url + `/groups/${groupNum}`).then(res => {\r\n          rgbColor = xyToRGB(res.data.action.xy[0], res.data.action.xy[1])\r\n          setRgb(rgbColor)\r\n        })\r\n        setGroupNum(groupNum)\r\n        setPicker(true)\r\n\r\n        // Set classes for different effects and to display the color picker\r\n        document.body.style.backgroundColor = \"lightgray\"\r\n        document.querySelector('#group-color-picker').classList.add('show');\r\n        document.querySelector('#group-color-picker').classList.remove('no-show');\r\n        document.addEventListener('click', () => {\r\n          document.querySelector('#group-color-picker').classList.add('no-show');\r\n          document.querySelector('#group-color-picker').classList.remove('show');\r\n          document.body.style.backgroundColor = \"whitesmoke\"\r\n        }, {once: true})\r\n    }\r\n  \r\n    let updateColor = (color) => { // For the onChangeComplete of the ColorPicker\r\n        let xyColor = rgbToXY(color.r, color.g, color.b) // Needs to return [0.2345, 0.9876] for the Hue API\r\n        xyColor.x = parseFloat(xyColor.x)\r\n        xyColor.y = parseFloat(xyColor.y)\r\n        Axios.put(props.url + `/groups/${groupNum}/action`, {\"xy\": [xyColor.x, xyColor.y]})\r\n    }\r\n\r\n    let updateBrightness = (e, groupNumber) => {\r\n        e.preventDefault()\r\n        let brightness = Number(e.target.elements[0].value)\r\n        if (brightness > 254 || brightness < 0) {\r\n        props.sendToast('Needs to be a value between 0 and 254', 'red')\r\n        return;\r\n        } else {\r\n        Axios.put(props.url + `/groups/${groupNumber}/action`, {\"bri\": brightness})\r\n        props.sendToast(`Set the brightness to ${brightness} on group number ${groupNumber}`, 'green')\r\n        }\r\n    }\r\n\r\n    let content;\r\n    if (groups.length > 0) { // Displays all groups if the useEffect found any\r\n        content = groups.map((group, id) => \r\n            <div className=\"col s6 offset-s3 m6\" key={id}>\r\n                <div className=\"card horizontal\">\r\n                    <div className=\"card-stacked\">\r\n                        <div className=\"card-content\">\r\n                            <h4 className=\"header\">{group[1].name}</h4>\r\n                            {lightSwitch}\r\n                            <img src={`${process.env.PUBLIC_URL}/images/${group[1].class}.svg`} alt={group[1].class} />\r\n                            <p>Lights are currently {group[1].state.any_on ? <span className=\"green-text bold\">On</span> : <span className=\"red-text \">Off</span>} </p>\r\n                        </div>\r\n                        <div className=\"card-action\">\r\n                            <button className=\"waves-effect waves-light btn-large teal\" onClick={() => toggleLights(group[0], true)}>On</button>\r\n                            <button className=\"waves-effect waves-light btn-large red\" onClick={() => toggleLights(group[0], false)}>Off</button>\r\n                            <button className=\"waves-effect waves-light btn-large pink\" onClick={() => colorToggle(group[0])}>Color</button>\r\n                            <form autoComplete=\"off\" onSubmit={(e) => updateBrightness(e, group[0])}>\r\n                                <div className=\"container\">\r\n                                    <input className=\"validate\" type=\"text\" name=\"brightness\" placeholder={\"Brightness: \" + group[1].action.bri + \" (between 0 and 254)\"} />\r\n                                </div>\r\n                                <button className=\"waves-effect waves-light btn-large grey\">Update Brightness</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className=\"container\">\r\n                <h1>No created groups found</h1>\r\n                <h4>Have you <Link to=\"/Login\">connected</Link> your hue bridge yet?</h4>\r\n            </div>);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 style={{\"marginTop\": 0}}>Groups</h2>\r\n            <div className={picker ? \"show\" : \"no-show\"} id=\"group-color-picker\">\r\n              <SketchPicker color={rgb} disableAlpha={true} onChangeComplete={(color) => updateColor(color.rgb)} />\r\n            </div>\r\n            <div className=\"container\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Login(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Connect your Hue Bridge</h2>\r\n            <h4>Do NOT do this on computers/devices that you don't trust</h4>\r\n            <form autoComplete=\"off\">\r\n                <label className=\"active\" htmlFor=\"ip\">Hue Bridge IP Address</label>\r\n                <div className=\"container\">\r\n                    <input className=\"validate\" type=\"text\" name=\"ip\" id=\"ip\" placeholder=\"Hue Bridge IP\" value={props.ip} onChange={(e) => props.setIP(e.target.value)} required />\r\n                </div>\r\n                <button className=\"waves-effect waves-light btn-large grey\" onClick={(e) => props.updateURL(e)}>Connect</button>\r\n            </form>\r\n            <div className=\"tooltip\">How to find a Hue Bridge IP Address\r\n            <span className=\"tooltiptext\">To find your Hue Bridges' IP Address: 1. Open the Hue App and go settings/Hue Bridges 2. Find the Bridge you want to connect to and hit the i icon on the right hand side 3. Note the IP shown there</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from 'react-router-dom';\r\nimport M from 'materialize-css';\r\nimport Axios from 'axios';\r\nimport Home from './Home';\r\nimport Lights from './Lights';\r\nimport Groups from './Groups';\r\nimport Connect from './Connect';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  const [url, setUrl] = useState('default');\r\n  const [connected, setConnected] = useState(false);\r\n  const [ip, setIp] = useState('');\r\n  const [redirect, setRedirect] = useState(false)\r\n\r\n  useEffect(() => { // To see if the user already has info in LS\r\n    if (localStorage.getItem('hue-info') === null) { //TODO: add a better check than just LS (contact hue api to check for errors?)\r\n      setConnected(false)\r\n    } else {\r\n      let info = localStorage.getItem('hue-info').split(',')\r\n      setConnected(true)\r\n      setUrl(`https://${info[0]}/api/${info[1]}`)\r\n    }\r\n  }, [])\r\n\r\n  let updateUrl = (e) => { // Sets the URL for the REST API\r\n    e.preventDefault();\r\n    Axios.post(`https://${ip}/api`, {\"devicetype\": \"YAHWA#user\"}).then(res => {\r\n      if (res.data[0].error) {\r\n        if (res.data[0].error.type === 101) {\r\n          createToast('Link button not pressed', 'red')\r\n        } else {\r\n          createToast('An error occured, please try again', 'red')\r\n        }\r\n      } else {\r\n        let username = res.data[0].success.username\r\n        localStorage.setItem('hue-info', `${ip},${username}`)\r\n        let tempUrl = `https://${ip}/api/${username}`\r\n        setUrl(tempUrl);\r\n        setConnected(true)\r\n        createToast('Connection success!', 'green')\r\n      }\r\n    })\r\n  }\r\n\r\n  let createToast = (message, classes=\"\") => {\r\n    M.toast({html: message, classes: classes})\r\n  }\r\n\r\n  let disconnect = () => {\r\n    setIp('')\r\n    localStorage.removeItem('hue-info')\r\n    setRedirect(true)\r\n  }\r\n\r\n  let login;\r\n  if (connected) {\r\n    login = (\r\n      <div className=\"container bottom-gap\">\r\n        <h2>Your Hue bridge is <Link to='/connect' className=\"green-text text-darken-3\">connected</Link>.</h2>\r\n        <button className=\"btn red\" onClick={disconnect}>Disconnect</button>\r\n      </div>\r\n    )\r\n  } else {\r\n    login = (\r\n      <div className=\"container bottom-gap\">\r\n        <h2>Connect your Hue Bridge</h2>\r\n        <form>\r\n          <label className=\"active\" htmlFor=\"ip\">Hue Bridge IP Address</label>\r\n          <input className=\"validate\" type=\"text\" name=\"ip\" id=\"ip\" placeholder=\"Hue Bridge IP\" value={ip} onChange={(e) => setIp(e.target.value)} required />\r\n          <input type=\"submit\" value=\"Connect\" onClick={(e) => updateUrl(e)} />\r\n        </form>\r\n        <div className=\"tooltip\">How to find a Hue Bridge IP Address\r\n          <span className=\"tooltiptext\">To find your Hue Bridges' IP Address: 1. Open the Hue App and go settings/Hue Bridges 2. Find the Bridge you want to connect to and hit the i icon on the right hand side 3. Note the IP shown there</span>\r\n        </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"no-show\" id=\"cover-div\"></div>\r\n      <header>\r\n        <nav>\r\n          <div className=\"nav-wrapper\">\r\n            <Link className=\"brand-logo\" to=\"/\">Hue App</Link>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n              <li><Link to=\"/lights\">Lights</Link></li>\r\n              <li><Link to=\"/groups\">Groups</Link></li>\r\n            </ul>\r\n            {redirect ? <Redirect to=\"/connect\" /> : ''}\r\n          </div>\r\n        </nav>\r\n      </header>\r\n      <main>\r\n        {/* <div className=\"no-show\" id=\"cover-div\"></div> */}\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/lights\" render={() => <Lights url={url} sendToast={createToast} />} /> \r\n        <Route exact path=\"/groups\" render={() => <Groups url={url} sendToast={createToast} />} />\r\n        <Route exact path=\"/connect\" render={() => <Connect url={url} updateURL={updateUrl} ip={ip} setIP={setIp} />} />\r\n        {login}\r\n      </main>\r\n    </Router>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}