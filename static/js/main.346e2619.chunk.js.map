{"version":3,"sources":["Home.jsx","colorConverter.js","Lights.jsx","Groups.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Home","show","num","descs","Array","from","document","querySelectorAll","classList","length","remove","add","className","onClick","width","height","src","title","frameborder","allow","allowfullscreen","scale","in_min","in_max","out_min","out_max","rgbToXY","r","g","b","red","Math","pow","green","blue","xx","yy","zz","x","y","Number","parseFloat","toFixed","xyToRGB","brightness","X","Z","R","G","B","round","Lights","props","useState","lightSwitch","setLightSwitch","lights","setLights","lightNumber","setLightNumber","picker","setPicker","rgb","setRgb","useEffect","url","Axios","get","then","res","hueLights","Object","entries","data","catch","err","console","log","content","toggleLight","lightNum","on","put","map","light","id","key","name","process","productname","alt","state","type","toLowerCase","includes","rgbColor","xy","bri","querySelector","addEventListener","once","colorToggle","autoComplete","onSubmit","e","preventDefault","target","elements","value","sendToast","updateBrightness","placeholder","to","style","color","disableAlpha","onChangeComplete","xyColor","updateColor","Groups","groups","setGroups","groupNum","setGroupNum","hueGroups","toggleLights","group","class","any_on","action","body","backgroundColor","groupNumber","App","setUrl","connected","setConnected","ip","setIp","redirect","setRedirect","localStorage","getItem","info","split","undefined","createToast","internalipaddress","login","message","classes","M","toast","html","removeItem","htmlFor","onChange","required","post","error","username","success","setItem","tempUrl","updateUrl","basename","exact","path","component","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","StrictMode","getElementById","URL","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.346e2619.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Home() {\r\n\r\n    let show = (num) => {\r\n        let descs = Array.from(document.querySelectorAll(\".description\"))\r\n        if (descs[num].classList.length > 1) {\r\n            descs[num].classList.remove(\"no-show\")\r\n        } else {\r\n            descs[num].classList.add(\"no-show\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <br />\r\n            <h1 className=\"faq\">FAQ</h1>\r\n            <h4 className=\"question\" onClick={() => show(0)}>What is Hue Lite?</h4>\r\n            <p className=\"description no-show\">\r\n                Hue Lite is a simple and easy to use website that has little to no setup in order to control your Hue lights.\r\n                From what I can tell there isn't really a site like this that allows for control of your lights from the web without\r\n                having to download an app first, so here it is, though it is pretty basic so far...\r\n            </p>\r\n            <h4 className=\"question\" onClick={() => show(1)}>How does it work?</h4>\r\n            <div className=\"description no-show\">\r\n                <p>\r\n                    This site uses React, Axios, and the Hue Developer API, to do everything, and has no backend in order to keep \r\n                    the speed and simplicity. Here is an example of it being used:\r\n                </p>\r\n                <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wnE3B5t_xBQ\" title=\"Hue Lite Example Video\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n            </div>\r\n            <h4 className=\"question\" onClick={() => show(2)}>How do you use it?</h4>\r\n            <p className=\"description no-show\">\r\n                All you need to have done is is go through the basic setup of your devices on the Hue app, for now that is the only way that you can\r\n                edit the names, groups, and other smaller settings like that, but future updates might add those features. Once the\r\n                lights and bridge are set up, in a perfect world you would just open up this site and it will automatically find a \r\n                Hue Bridge on your network, have the IP Address of the bridge autofill, press the Link button on the bridge, and hit\r\n                connect! But, this isn't a perfect world so go through the FAQ to try to troubleshoot any problems you might come across.\r\n            </p>\r\n            <h4 className=\"question\" onClick={() => show(3)}>It is not working/connecting</h4>\r\n            <p className=\"description no-show\">\r\n                1. The Bridge won't connect - Getting an error pop up - Make sure you are on the same WiFi network as the one that your bridge\r\n                is connected to, and make sure that the IP you put in matches what the Hue app says it is. 2. The site says I'm connected but it\r\n                isn't actually connected - This is a problem with how local storage works and what sites can access it if it is set on a different \r\n                site or even URL. This bug is still an issue that I am working on.\r\n            </p>\r\n            <h4 className=\"question\" onClick={() => show(4)}>Do I always have to relink my Bridge?</h4>\r\n            <p className=\"description no-show\">\r\n                Depending on the browser that you are using and the privacy features of it, there could be issues where it may say that you are connected but no lights are found. This site uses\r\n                localStorage to keep the data that it needs stored in the browser, this feature seems to be somewhat 50/50 whether it works for this\r\n                or not. Reconnecting doesn't hurt, all it does is adds a new \"user\" to the Hue API's whitelist. I am working/thinking of \r\n                ways around having to do that, and a fix should come soon. For now making sure to enable cookies for this site should help.\r\n            </p>\r\n            <br />\r\n        </div>\r\n    )\r\n}","const scale = (num, in_min, in_max, out_min, out_max) => { // To Scale numbers from a range down to another range\r\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n  }\r\n\r\nexport function rgbToXY(r, g, b) { // Return Format: [0.2553, 0.9112]\r\n    //RGB values set in between 0 and 1\r\n    r = scale(r, 0, 255, 0, 1)\r\n    g = scale(g, 0, 255, 0, 1)\r\n    b = scale(b, 0, 255, 0, 1)\r\n    //Apply gamma correction (For more accurate colors)\r\n    let red = r > 0.04045 ? Math.pow((r + 0.055) / (1.0 + 0.055), 2.4) : (r / 12.92)\r\n    let green = g > 0.04045 ? Math.pow((g + 0.055) / (1.0 + 0.055), 2.4) : (g / 12.92)\r\n    let blue = b > 0.04045 ? Math.pow((b + 0.055) / (1.0 + 0.055), 2.4) : (b / 12.92)\r\n    //Convert RGB values to XYZ\r\n    let xx = red * 0.649926 + green * 0.103455 + blue * 0.197109;\r\n    let yy = red * 0.234327 + green * 0.743075 + blue * 0.022598;\r\n    let zz = red * 0 + green * 0.053077 + blue * 1.035763\r\n    //Calculate XY values from XYZ\r\n    let x = xx / (xx + yy + zz);\r\n    let y = yy / (xx + yy + zz);\r\n    //Could now use the Y value as brightness yy: scale(y, 0, 1, 0, 255).toFixed(0)\r\n    return {'x': Number.parseFloat(x).toFixed(4), 'y': Number.parseFloat(y).toFixed(4)}\r\n}\r\n\r\nexport function xyToRGB(x, y, brightness) { // Return Format: {r: 255, g: 255, b: 255}\r\n    // Convert\r\n    let z = 1 - x - y\r\n    let Y = brightness\r\n    let X = (Y / y) * x\r\n    let Z = (Y / y) * z\r\n    // Convert to RGB\r\n    let R =  X * 1.656492 - Y * 0.354851 - Z * 0.255038;\r\n    let G = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;\r\n    let B =  X * 0.051713 - Y * 0.121364 + Z * 1.011530;\r\n    // Reverse gamma correction\r\n    let r = R <= 0.0031308 ? 12.92 * R : (1 + 0.055) * Math.pow(R, (1 / 2.4)) - 0.055;\r\n    let g = G <= 0.0031308 ? 12.92 * G : (1 + 0.055) * Math.pow(G, (1 / 2.4)) - 0.055;\r\n    let b = B <= 0.0031308 ? 12.92 * B : (1 + 0.055) * Math.pow(B, (1 / 2.4)) - 0.055;\r\n\r\n    return {'r': Math.round(scale(r, 0, 17, 0, 255)), 'g': Math.round(scale(g, 0, 17, 0, 255)), 'b': Math.round(scale(b, 0, 17, 0, 255))};\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { SketchPicker } from 'react-color';\r\nimport { rgbToXY, xyToRGB } from './colorConverter.js';\r\nimport Axios from 'axios';\r\n\r\nexport default function Lights(props) {\r\n  const [lightSwitch, setLightSwitch] = useState(false); // To hopefully refetch the API when the lights are toggled\r\n  const [lights, setLights] = useState([]);\r\n  const [lightNumber, setLightNumber] = useState(0); // Set this value to whatever light the colorpicker is for at that time\r\n  const [picker, setPicker] = useState(false); // Whether or not to display the Color Picker\r\n  const [rgb, setRgb] = useState({\"r\": 255, \"g\": 255, \"b\": 255});\r\n\r\n  useEffect(() => { // Will get all lights on page load as long as there is a URL given\r\n    if (props.url !== \"default\") {\r\n      Axios.get(props.url + '/lights').then(res => {\r\n        let hueLights = Object.entries(res.data)\r\n        setLights(hueLights)\r\n      }).catch(err => {\r\n        console.log(err);\r\n      })\r\n    }\r\n  }, [props.url, lightSwitch])\r\n\r\n  let toggleLight = (lightNum, on) => { // Turns a specific light on/off based on its ID\r\n    Axios.put(props.url + `/lights/${lightNum}/state`, {'on': on})\r\n      setLightSwitch(!lightSwitch)\r\n  }\r\n\r\n  let colorToggle = (lightNum) => { // Show the color picker for the corresponding light\r\n    let rgbColor; // Needs to return {r: 255, g: 255, b: 255} for react-color\r\n    Axios.get(props.url + `/lights/${lightNum}`).then(res => {\r\n      rgbColor = xyToRGB(res.data.state.xy[0], res.data.state.xy[1], res.data.state.bri)\r\n      setRgb(rgbColor)\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n    setLightNumber(lightNum)\r\n    setPicker(true)\r\n\r\n    document.querySelector('#color-picker').classList.add('show');\r\n    document.querySelector('#color-picker').classList.remove('no-show');\r\n    document.querySelector('#cover-div').classList.add('opaque-div');\r\n    document.querySelector('#cover-div').classList.remove('no-show');\r\n    document.addEventListener('click', () => {\r\n      document.querySelector('#color-picker').classList.remove('show');\r\n      document.querySelector('#color-picker').classList.add('no-show');\r\n      document.querySelector('#cover-div').classList.add('no-show');\r\n      document.querySelector('#cover-div').classList.remove('opaque-div');\r\n    }, {once: true})\r\n  }\r\n\r\n  let updateColor = (color) => { // For the onChangeComplete of the ColorPicker\r\n    let xyColor = rgbToXY(color.r, color.g, color.b) // Needs to return [0.2345, 0.9876] for the Hue API\r\n    xyColor.x = parseFloat(xyColor.x)\r\n    xyColor.y = parseFloat(xyColor.y)\r\n    Axios.put(props.url + `/lights/${lightNumber}/state`, {\"xy\": [xyColor.x, xyColor.y]})\r\n  }\r\n\r\n  let updateBrightness = (e, lightNumber) => {\r\n    e.preventDefault()\r\n    let brightness = Number(e.target.elements[0].value)\r\n    if (brightness > 254 || brightness < 0) {\r\n      props.sendToast('Needs to be a value between 0 and 254', 'red')\r\n      return;\r\n    } else {\r\n      Axios.put(props.url + `/lights/${lightNumber}/state`, {\"bri\": brightness})\r\n      props.sendToast(`Set the brightness to ${brightness} on light number ${lightNumber}`, 'green')\r\n    }\r\n  }\r\n\r\n  let content;\r\n  if (lights.length > 0) { // Show connected lights or no connected lights message\r\n    content = lights.map((light, id) =>\r\n      <div className=\"col s6 offset-s3 m6\" key={id}>\r\n        <div className=\"card horizontal\">\r\n          <div className=\"card-stacked\">\r\n            <div className=\"card-content\">\r\n              <h4 className=\"header\">{light[1].name}</h4>\r\n              {lightSwitch}\r\n              <img src={`${process.env.PUBLIC_URL}/images/${light[1].productname}.svg`} alt={light[1].productname} />\r\n              <p><span className=\"blue-text bold\">{light[1].name}</span> is currently {light[1].state.on ? <span className=\"green-text bold\">On</span> : <span className=\"red-text bold\">Off</span>} </p>\r\n              <p>Product Name: {light[1].productname}</p>\r\n            </div>\r\n            <div className=\"card-action\">\r\n              <button className=\"waves-effect waves-light btn-large teal\" onClick={() => toggleLight(light[0], true)}>On</button>\r\n              <button className=\"waves-effect waves-light btn-large red\" onClick={() => toggleLight(light[0], false)}>Off</button>\r\n              {light[1].type.toLowerCase().includes(\"color\") ? <button className=\"waves-effect waves-light btn-large pink\" onClick={() => colorToggle(light[0])}>Color</button> : ''}\r\n              <form autoComplete=\"off\" onSubmit={(e) => updateBrightness(e, light[0])}>\r\n                <div className=\"container\">\r\n                  <input className=\"validate\" type=\"text\" name=\"brightness\" placeholder={\"Current Brightness: \" + light[1].state.bri + \" (between 0 and 254)\"} />\r\n                </div>\r\n                <button className=\"waves-effect waves-light btn-large grey\">Update Brightness</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    content = (\r\n      <div className=\"container\">\r\n        <h1>No connected lights found</h1>\r\n        <h4>Have you <Link to=\"/login\">connected</Link> your hue bridge yet?</h4>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 style={{\"marginTop\": 0}}>Lights</h2>\r\n      <div className={picker ? \"show\" : \"no-show\"} id=\"color-picker\">\r\n        <SketchPicker width=\"15vw\" color={rgb} disableAlpha={true} onChangeComplete={(color) => updateColor(color.rgb)} />\r\n      </div>\r\n      <div className=\"container\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { SketchPicker } from 'react-color';\r\nimport { rgbToXY, xyToRGB } from './colorConverter.js';\r\nimport Axios from 'axios';\r\n\r\nexport default function Groups(props) {\r\n    const [lightSwitch, setLightSwitch] = useState(false); // To refetch the API when the lights are toggled\r\n    const [groups, setGroups] = useState([]);\r\n    const [picker, setPicker] = useState(false); // Whether or not to display the Color Picker\r\n    const [groupNum, setGroupNum] = useState(0);\r\n    const [rgb, setRgb] = useState({\"r\": 255, \"g\": 255, \"b\": 255}); // Color Picker color\r\n\r\n    useEffect(() => { // Will get all groups as long as there is a URL given\r\n        if (props.url !== \"default\") {\r\n            Axios.get(props.url + \"/groups\").then(res => {\r\n                let hueGroups = Object.entries(res.data)\r\n                setGroups(hueGroups)\r\n            })\r\n        }\r\n    }, [props.url, lightSwitch])\r\n\r\n    let toggleLights = (groupNum, on) => { // Toggles all lights in the group\r\n        Axios.put(props.url + `/groups/${groupNum}/action`, {'on': on})\r\n        setLightSwitch(!lightSwitch)\r\n    }\r\n\r\n    let colorToggle = (groupNum) => { // Show the color picker for the corresponding light\r\n        let rgbColor; // Needs to return {r: 255, g: 255, b: 255} for react-color\r\n        Axios.get(props.url + `/groups/${groupNum}`).then(res => {\r\n          rgbColor = xyToRGB(res.data.action.xy[0], res.data.action.xy[1])\r\n          setRgb(rgbColor)\r\n        })\r\n        setGroupNum(groupNum)\r\n        setPicker(true)\r\n\r\n        // Set classes for different effects and to display the color picker\r\n        document.body.style.backgroundColor = \"lightgray\"\r\n        document.querySelector('#group-color-picker').classList.add('show');\r\n        document.querySelector('#group-color-picker').classList.remove('no-show');\r\n        document.addEventListener('click', () => {\r\n          document.querySelector('#group-color-picker').classList.add('no-show');\r\n          document.querySelector('#group-color-picker').classList.remove('show');\r\n          document.body.style.backgroundColor = \"whitesmoke\"\r\n        }, {once: true})\r\n    }\r\n  \r\n    let updateColor = (color) => { // For the onChangeComplete of the ColorPicker\r\n        let xyColor = rgbToXY(color.r, color.g, color.b) // Needs to return [0.2345, 0.9876] for the Hue API\r\n        xyColor.x = parseFloat(xyColor.x)\r\n        xyColor.y = parseFloat(xyColor.y)\r\n        Axios.put(props.url + `/groups/${groupNum}/action`, {\"xy\": [xyColor.x, xyColor.y]})\r\n    }\r\n\r\n    let updateBrightness = (e, groupNumber) => {\r\n        e.preventDefault()\r\n        let brightness = Number(e.target.elements[0].value)\r\n        if (brightness > 254 || brightness < 0) {\r\n        props.sendToast('Needs to be a value between 0 and 254', 'red')\r\n        return;\r\n        } else {\r\n        Axios.put(props.url + `/groups/${groupNumber}/action`, {\"bri\": brightness})\r\n        props.sendToast(`Set the brightness to ${brightness} on group number ${groupNumber}`, 'green')\r\n        }\r\n    }\r\n\r\n    let content;\r\n    if (groups.length > 0) { // Displays all groups if the useEffect found any\r\n        content = groups.map((group, id) => \r\n            <div className=\"col s6 offset-s3 m6\" key={id}>\r\n                <div className=\"card horizontal\">\r\n                    <div className=\"card-stacked\">\r\n                        <div className=\"card-content\">\r\n                            <h4 className=\"header\">{group[1].name}</h4>\r\n                            {lightSwitch}\r\n                            <img src={`${process.env.PUBLIC_URL}/images/${group[1].class}.svg`} alt={group[1].class} />\r\n                            <p>Lights are currently {group[1].state.any_on ? <span className=\"green-text bold\">On</span> : <span className=\"red-text \">Off</span>} </p>\r\n                        </div>\r\n                        <div className=\"card-action\">\r\n                            <button className=\"waves-effect waves-light btn-large teal\" onClick={() => toggleLights(group[0], true)}>On</button>\r\n                            <button className=\"waves-effect waves-light btn-large red\" onClick={() => toggleLights(group[0], false)}>Off</button>\r\n                            <button className=\"waves-effect waves-light btn-large pink\" onClick={() => colorToggle(group[0])}>Color</button>\r\n                            <form autoComplete=\"off\" onSubmit={(e) => updateBrightness(e, group[0])}>\r\n                                <div className=\"container\">\r\n                                    <input className=\"validate\" type=\"text\" name=\"brightness\" placeholder={\"Brightness: \" + group[1].action.bri + \" (between 0 and 254)\"} />\r\n                                </div>\r\n                                <button className=\"waves-effect waves-light btn-large grey\">Update Brightness</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className=\"container\">\r\n                <h1>No created groups found</h1>\r\n                <h4>Have you <Link to=\"/Login\">connected</Link> your hue bridge yet?</h4>\r\n            </div>);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 style={{\"marginTop\": 0}}>Groups</h2>\r\n            <div className={picker ? \"show\" : \"no-show\"} id=\"group-color-picker\">\r\n              <SketchPicker color={rgb} disableAlpha={true} onChangeComplete={(color) => updateColor(color.rgb)} />\r\n            </div>\r\n            <div className=\"container\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from 'react-router-dom';\r\nimport M from 'materialize-css';\r\nimport Axios from 'axios';\r\nimport Home from './Home';\r\nimport Lights from './Lights';\r\nimport Groups from './Groups';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  const [url, setUrl] = useState('default');\r\n  const [connected, setConnected] = useState(false);\r\n  const [ip, setIp] = useState('');\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  useEffect(() => { // To see if the user already has info in LS\r\n    if (localStorage.getItem('hue-info') === null) { //TODO: add a better check than just LS (contact hue api to check for errors?)\r\n      setConnected(false)\r\n    } else {\r\n      let info = localStorage.getItem('hue-info').split(',')\r\n      setConnected(true)\r\n      setUrl(`https://${info[0]}/api/${info[1]}`)\r\n    }\r\n\r\n    // Set the IP Address by default\r\n    Axios.get(\"https://discovery.meethue.com\").then((res) => {\r\n      if (res.data[0] !== undefined && !connected) {\r\n        setIp(res.data[0].internalipaddress)\r\n        createToast('Autofilled your Hue\\'s IP Address', 'green')\r\n      } else if (connected) {\r\n        createToast('Connected to your Hue Bridge', 'green')\r\n      } else {\r\n        createToast('Not able to automatically find a Hue Bridge on your network', 'orange')\r\n      }\r\n    })\r\n\r\n  }, [])\r\n\r\n  let updateUrl = (e) => { // Sets the URL for the API\r\n    e.preventDefault();\r\n    Axios.post(`https://${ip}/api`, {\"devicetype\": \"HueLite#user\"}).then(res => {\r\n      if (res.data[0].error) {\r\n        if (res.data[0].error.type === 101) {\r\n          createToast('Link button not pressed', 'red')\r\n        } else {\r\n          createToast('An error occured, please try again', 'red')\r\n        }\r\n      } else {\r\n        let username = res.data[0].success.username\r\n        localStorage.setItem('hue-info', `${ip},${username}`)\r\n        let tempUrl = `https://${ip}/api/${username}`\r\n        setUrl(tempUrl);\r\n        setConnected(true)\r\n        createToast('Connection success!', 'green')\r\n      }\r\n    })\r\n  }\r\n\r\n  let createToast = (message, classes=\"\") => {\r\n    M.toast({html: message, classes: classes})\r\n  }\r\n\r\n  let disconnect = () => {\r\n    setIp('')\r\n    localStorage.removeItem('hue-info')\r\n    setUrl('default')\r\n    setConnected(false)\r\n    setRedirect(true)\r\n  }\r\n\r\n  let login;\r\n  if (connected) {\r\n    login = (\r\n      <div className=\"container bottom-gap\">\r\n        <h2>Your Hue bridge is <Link to='/login' className=\"green-text text-darken-3\">connected</Link>.</h2>\r\n        <button className=\"btn red\" onClick={disconnect}>Disconnect</button>\r\n      </div>\r\n    )\r\n  } else {\r\n    login = (\r\n      <div className=\"container bottom-gap\">\r\n        <h2>Connect your Hue Bridge</h2>\r\n        <form>\r\n          <label className=\"active\" htmlFor=\"ip\">Hue Bridge IP Address</label>\r\n          <input className=\"validate\" type=\"text\" name=\"ip\" id=\"ip\" placeholder=\"Hue Bridge IP\" value={ip} onChange={(e) => setIp(e.target.value)} required />\r\n          <input type=\"submit\" value=\"Connect\" onClick={(e) => updateUrl(e)} />\r\n        </form>\r\n        <p>Make sure to press the link button on the Hue Bridge within 1 minute of pressing Connect</p>\r\n        <div className=\"tooltip\">How to find the IP of your Hue Bridge\r\n          <span className=\"tooltiptext\">If the IP field isn't autofilled: 1. Open the Hue App and go settings/Hue Bridges 2. Find the Bridge you want to connect to and hit the i icon 3. Copy the IP shown there, hit the pairing button on the Hue Bridge and click Connect.</span>\r\n        </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"no-show\" id=\"cover-div\"></div>\r\n      <header>\r\n        <nav>\r\n          <div className=\"nav-wrapper\">\r\n            <Link className=\"brand-logo\" to=\"/\">Hue Lite</Link>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n              <li><Link to=\"/lights\">Lights</Link></li>\r\n              <li><Link to=\"/groups\">Groups</Link></li>\r\n            </ul>\r\n            {redirect ? <Redirect to=\"/\" /> : ''}\r\n          </div>\r\n        </nav>\r\n      </header>\r\n      <main>\r\n        {login}\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/lights\" render={() => <Lights url={url} sendToast={createToast} />} /> \r\n        <Route path=\"/groups\" render={() => <Groups url={url} sendToast={createToast} />} />\r\n      </main>\r\n    </Router>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}